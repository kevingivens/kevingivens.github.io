{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/components/item-tags.tsx","webpack://gatsby-starter-hello-world/./src/components/blog-list-item.tsx","webpack://gatsby-starter-hello-world/./src/components/listing.tsx","webpack://gatsby-starter-hello-world/./src/texts/hero.mdx","webpack://gatsby-starter-hello-world/./src/components/list.tsx","webpack://gatsby-starter-hello-world/./src/texts/bottom.mdx","webpack://gatsby-starter-hello-world/./src/templates/homepage.tsx"],"names":["tags","useMinimalBlogConfig","tagsPath","basePath","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","post","showTags","mb","sx","fontSize","color","title","mt","a","date","posts","className","children","ul","margin","padding","li","listStyle","variant","Text","props","console","warn","layoutProps","_frontmatter","MDXContent","components","mdxType","fontWeight","parentName","isMDXComponent","Title","makeShortcode","text","data","allPost","nodes","blogPath","siteTitle","useSiteMetadata","visuallyHidden","p"],"mappings":"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","file":"component---src-templates-homepage-tsx-0be868c3e28a58913302.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: `bold`,\n      color: `heading`\n    }} mdxType=\"Text\">\n  Hello.\n    </Text>\n    <p>{`Welcome to my blog.  I blog about topics in Computational Finance, Programming and Mathematics.  You can find more about me in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kevingivens.github.io/about\"\n      }}>{`about`}</a>{` section. Thanks for visiting.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx } from \"theme-ui\"\n\ntype ListProps = {\n  children: React.ReactNode\n}\n\nconst List = ({ children }: ListProps) => (\n  <section\n    sx={{\n      mb: [5, 5, 6],\n      ul: { margin: 0, padding: 0 },\n      li: { listStyle: `none`, mb: 3 },\n      a: { variant: `links.listItem` },\n    }}\n  >\n    {children}\n  </section>\n)\n\nexport default List\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Title = makeShortcode(\"Title\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Title text=\"Projects\" mdxType=\"Title\" />\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/enthought/pyql\"\n        }}>{`PyQL`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Title from \"../components/title\"\nimport Listing from \"../components/listing\"\nimport List from \"../components/list\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport { visuallyHidden } from \"../styles/utils\"\n// @ts-ignore\nimport Hero from \"../texts/hero\"\n// @ts-ignore\nimport Bottom from \"../texts/bottom\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\n//const Homepage = ({ posts }: PostsProps) => {\nconst Homepage = ({ data }) => {\n  \n  const posts = data.allPost.nodes;\n  \n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section sx={{ mb: [5, 6, 7], p: { fontSize: [1, 2, 3], mt: 2 }, variant: `section_hero` }}>\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>Read all posts</Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      <List sx={{ variant: `section_bottom` }}>\n        <Bottom />\n      </List>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n\nexport default Homepage\n"],"sourceRoot":""}