{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/components/item-tags.tsx","webpack://gatsby-starter-hello-world/./src/components/blog-list-item.tsx","webpack://gatsby-starter-hello-world/./src/components/listing.tsx","webpack://gatsby-starter-hello-world/./src/templates/tag.tsx"],"names":["tags","useMinimalBlogConfig","tagsPath","basePath","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","post","showTags","mb","sx","fontSize","color","title","mt","a","date","posts","className","pageContext","alignItems","justifyContent","flexFlow","variant","marginY"],"mappings":"mMA8BA,IAjBiB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,KAClB,GAA+BC,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGH,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,KACD,gBAAC,KAAD,CAAOG,GAAIC,OAAMC,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,EAAjB,IAA6BG,EAAIG,OACjEH,EAAIQ,a,uHCkBjB,EAjBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,QAAC,KAAD,CAAKC,GAAI,IACP,QAAC,KAAD,CAAOP,GAAIC,OAAMC,GAAIG,EAAKN,KAAMS,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,SAC9DL,EAAKM,QAER,aAAGH,GAAI,CAAEE,MAAM,YAAcE,GAAI,EAAGC,EAAG,CAAEH,MAAM,aAAgBD,SAAU,CAAC,EAAG,EAAG,MAC9E,oBAAOJ,EAAKS,MACXT,EAAKd,MAAQe,IACZ,QAAC,WAAD,YAEE,QAAC,IAAD,CAAUf,KAAMc,EAAKd,WCJ/B,EARgB,SAAC,GAAD,IAAGwB,EAAH,EAAGA,MAAH,IAAUC,iBAAV,eAA0BV,gBAA1B,gBACd,mBAASE,GAAI,CAAED,GAAI,CAAC,EAAG,EAAG,IAAMS,UAAWA,GACxCD,EAAMpB,KAAI,SAACU,GAAD,OACT,QAAC,EAAD,CAAcP,IAAKO,EAAKN,KAAMM,KAAMA,EAAMC,SAAUA,U,4HCqD1D,UA9CY,SAAC,GAAsC,IAApCS,EAAmC,EAAnCA,MAAOE,EAA4B,EAA5BA,YAKpB,GAA+BzB,SAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAAKiB,MAAK,QAAUM,EAAYb,QAChC,QAAC,KAAD,CAAMI,GAAI,CAAEU,WAAW,SAAWC,eAAe,gBAAkBC,SAAS,UAC1E,QAAC,KAAD,CAASpB,GAAG,KAAKqB,QAAQ,YAAYb,GAAI,CAAEc,QAAS,IACjDL,EAAYb,OAEf,QAAC,KAAD,CACEJ,GAAIC,OACJO,GAAI,CAAEa,QAAQ,kBAAoBC,QAAS,GAC3CpB,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,IAHrC,mBAQF,QAAC,IAAD,CAASsB,MAAOA,EAAOP,GAAI,CAAEI,GAAI,CAAC,EAAG","file":"component---src-templates-tag-tsx-844774bdbacb00dfb785.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport Listing from \"../components/listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"../components/seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n// const Tag = ({ data }) => {\n  \n  //const posts = data.allPost.nodes;\n  \n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading as=\"h1\" variant=\"styles.h1\" sx={{ marginY: 2 }}>\n          {pageContext.name}\n        </Heading>\n        <TLink\n          as={Link}\n          sx={{ variant: `links.secondary`, marginY: 2 }}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n\nexport default Tag\n"],"sourceRoot":""}