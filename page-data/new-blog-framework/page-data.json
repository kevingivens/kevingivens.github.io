{"componentChunkName":"component---src-templates-post-tsx","path":"/new-blog-framework","result":{"data":{"post":{"slug":"/new-blog-framework","title":"New Blog Framework","date":"11.05.2021","tags":[{"name":"Javascript","slug":"javascript"},{"name":"React","slug":"react"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"New Blog Framework\",\n  \"date\": \"2021-05-11T00:00:00.000Z\",\n  \"tags\": [\"Javascript\", \"React\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Summary\"), \": I review some of the challenges I faced porting my blog from Pelican to Gatsby.\"), mdx(\"h3\", null, \"Introduction\"), mdx(\"p\", null, \"I've spent the past few weeks updating this blog from the python-based \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blog.getpelican.com/\"\n  }, \"Pelican\"), \" framework to the Javascript-based \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/\"\n  }, \"Gatsby\"), \" framework.\\nOverall, it's been a challenging but rewarding experience.  I've learned a little bit about the React framework as well as Gatsby's plugin\\necosystem.  I thought a brief overview of some of the challenges I faced could be of use to other bloggers looking to make the switch.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Starter Theme\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"I chose a Gatsby blog theme from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/starters/LekoArts/gatsby-starter-minimal-blog/\"\n  }, \"LekoArts\"), \". It's a nice, simple design with all the features I need for blog site. One complicating issue I found was that the theme ships as a\\n\\\"shadowed\\\" theme \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/blog/2019-04-29-component-shadowing/\"\n  }, \"plugin\"), \" with a set of core and blog specific components.  In order to modify the theme, I had to combine components from both plugins into a single local plugin.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Theme UI\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The blog theme uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://theme-ui.com/home/\"\n  }, \"ThemeUI\"), \".  This library enables the Light and Dark mode button at the top of the page as well as the responsive layout.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GraphQL\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Based on my experience, this is the biggest feature enhancement over Pelican.  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"\"\n  }, \"GraphQL\"), \" is a query language that you can embed within your templates in order to query your site for data.\\nThis is a big improvement over how site data is managed in a static site generator.  The query language gives the user fine-grained levels of control of the data that each template components depends upon.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MDX\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The blog uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mdxjs.com/\"\n  }, \"MDX\"), \" for markdown parsing. This is extended version of markdown that allows you to blend JSX and markdown in the same file.  The only issue I had came from trying to incorporate Latex into my posts (discussed below).  For Latex rendering, MDX depends on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remark-math\"), \" module.  As I explain below, I had some compatiblility issues\\nbetween \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remark-math\"), \" and other gatsby plugins.     \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Latex Integration (Katex, Remark)\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This was the biggest challenge I faced in porting the site.  I used the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://katex.org/\"\n  }, \"Katex\"), \" library to parse Latex in Javascript.  There is gatsby \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-remark-katex/\"\n  }, \"plugin\"), \" for this.\\nWhat I discovered through trial and error is that this plugin needs to be updated to reflect the latest changes in another plugin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remark-math\"), \".\\nI had to manually apply changes and fixes described in these two issue threads; \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby/issues/30865\"\n  }, \"1\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby/issues/20538\"\n  }, \"2\"), \". Essentially, I built a local verion of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-remark-katex\"), \" plugin that includes code changes that will hopefully appear in a future release version of the plugin.   \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Syntax Highlighting (Prism)\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The site uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prismjs.com/\"\n  }, \"Prism\"), \" for syntax highlighting. Overall it works well. One of the nice features is the line highlighting in code snippets.  For example, I can specify the specific lines that I want to emphasize in a snippet\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\",\n    \"metastring\": \"{2,4}\",\n    \"{2,4}\": true\n  }, \"istrike = 0.04\\nnotional = 50000\\nstart = today()\\nend = start + int(0.246575*365+0.5) # This is from Quantlib unittest\\nvar_swap = VarianceSwap(SwapType.Long, 0.04, 50000, start, end)\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The only remaining challenge is for me is to add Cython to the recognized language in Prism.  This can be accomplished using the language \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extend\"), \" api.  I just need to get it done.  In Prism's defence, highlighting support for Cython is poor everywhere.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Publishing\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Publishing is fairly straightforward using the gh-pages node \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby-ru/blob/master/docs/docs/how-gatsby-works-with-github-pages.md\"\n  }, \"plugin\"), \".\"))), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"Overall, I think porting the blog was a success. If nothing else, it gave me the opportunity to learn more Javascript.  The Latex issue I encountered is typical of plugin-based systems, nothing unique to Gatsby.  There may be some bugs in the near future, but hopefully I can get them fixed soon.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Summary : I review some of the challenges I faced porting my blog from Pelican to Gatsby. Introduction I've spent the past few weeksâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/new-blog-framework","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}